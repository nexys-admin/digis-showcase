name: Deploy

on:
  push:
    tags:
      - v*

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: 14
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - run: yarn
      - run: yarn test
      - name: Build page
        run: SNOWPACK_PUBLIC_GIT_SHA=$GITHUB_SHA SNOWPACK_PUBLIC_URL=/finy-showcase SNOWPACK_PUBLIC_VERSION=${GITHUB_REF##*/} yarn buildAll
      - name: add 404
        run: cp build/index.html build/404.html
      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
          publish_dir: ./build
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: ['build']
  #   steps:
  #     - run: ls
  #     - name: Zip build
  #       run: |
  #         zip -r build.zip ./build
  #     - name: prep SSH
  #       run: |
  #         mkdir -p ~/.ssh
  #         echo "${{ secrets.SSH_NEXYS_KEY_PRIVATE }}" > ~/.ssh/id_rsa
  #         chmod 600 ~/.ssh/id_rsa
  #         echo "$HOST" > ~/.ssh/known_hosts
  #     - name: Publish package
  #       run: |
  #         scp -o 'StrictHostKeyChecking no' build.zip  root@$HOST:$ZIPFILE.zip
  #         ssh root@$HOST << EOF
  #           unzip -o $ZIPFILE.zip
  #           rm -rf /root/volumes/static/$REMOTE_PATH
  #           mv build /root/volumes/static/$REMOTE_PATH
  #           rm $ZIPFILE.zip
  #         EOF
